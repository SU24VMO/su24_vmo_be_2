// <auto-generated />
using System;
using BusinessObject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(VMODBContext))]
    [Migration("20240801115644_FixIPAddressField")]
    partial class FixIPAddressField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Property<Guid>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("HashPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("SaltPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.AccountToken", b =>
                {
                    b.Property<Guid>("AccountTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeRefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDateAccessToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDateRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountTokenId");

                    b.HasIndex("AccountID");

                    b.ToTable("AccountToken", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Achievement", b =>
                {
                    b.Property<Guid>("AchievementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AchievementID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Achievement", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Activity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProcessingPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityId");

                    b.HasIndex("ProcessingPhaseId");

                    b.ToTable("Activity", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.ActivityImage", b =>
                {
                    b.Property<Guid>("ActivityImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityImageId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityImage", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Admin", b =>
                {
                    b.Property<Guid>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminID");

                    b.HasIndex("AccountID");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.BankingAccount", b =>
                {
                    b.Property<Guid>("BankingAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MemberID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrganizationManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BankingAccountID");

                    b.HasIndex("AccountId");

                    b.HasIndex("MemberID");

                    b.HasIndex("OrganizationManagerID");

                    b.ToTable("BankingAccount", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Campaign", b =>
                {
                    b.Property<Guid>("CampaignID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationConfirmForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BankingAccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanBeDonated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CheckTransparentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModify")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransparent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TargetAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CampaignID");

                    b.HasIndex("BankingAccountID");

                    b.HasIndex("CampaignTypeID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Campaign", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CampaignType", b =>
                {
                    b.Property<Guid>("CampaignTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampaignTypeID");

                    b.ToTable("CampaignType", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CreateActivityRequest", b =>
                {
                    b.Property<Guid>("CreateActivityRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateByMember")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreateByOM")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CreateActivityRequestID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreateByMember");

                    b.HasIndex("CreateByOM");

                    b.ToTable("CreateActivityRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CreateCampaignRequest", b =>
                {
                    b.Property<Guid>("CreateCampaignRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CampaignID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreateByMember")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreateByOM")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CreateCampaignRequestID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CampaignID")
                        .IsUnique();

                    b.HasIndex("CreateByMember");

                    b.HasIndex("CreateByOM");

                    b.ToTable("CreateCampaignRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CreateOrganizationManagerRequest", b =>
                {
                    b.Property<Guid>("CreateOrganizationManagerRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenIdentification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAcceptTermOfUse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonalTaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CreateOrganizationManagerRequestID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("OrganizationManagerID");

                    b.ToTable("CreateOrganizationManagerRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CreateOrganizationRequest", b =>
                {
                    b.Property<Guid>("CreateOrganizationRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AchievementLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AreaOfActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizationDocuments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FoundingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganizationManagerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationTaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMediaLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CreateOrganizationRequestID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreateBy");

                    b.HasIndex("OrganizationID")
                        .IsUnique();

                    b.ToTable("CreateOrganizationRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CreatePostRequest", b =>
                {
                    b.Property<Guid>("CreatePostRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreateByMember")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreateByOM")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CreatePostRequestID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreateByMember");

                    b.HasIndex("CreateByOM");

                    b.HasIndex("PostID")
                        .IsUnique();

                    b.ToTable("CreatePostRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.CreateVolunteerRequest", b =>
                {
                    b.Property<Guid>("CreateVolunteerRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AchievementLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenIdentification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailDescriptionLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAcceptTermOfUse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("MemberAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MemberID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleInClub")
                        .HasColumnType("int");

                    b.Property<string>("SocialMediaLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CreateVolunteerRequestID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreateBy");

                    b.ToTable("CreateVolunteerRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.DonatePhase", b =>
                {
                    b.Property<Guid>("DonatePhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentMoney")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessing")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percent")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DonatePhaseId");

                    b.HasIndex("CampaignId")
                        .IsUnique();

                    b.ToTable("DonatePhase", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.IPAddress", b =>
                {
                    b.Property<Guid>("IPAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddressValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Road")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IPAddressId");

                    b.HasIndex("AccountId");

                    b.ToTable("IPAddress", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Member", b =>
                {
                    b.Property<Guid>("MemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TiktokUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberID");

                    b.HasIndex("AccountID");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Moderator", b =>
                {
                    b.Property<Guid>("ModeratorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModeratorID");

                    b.HasIndex("AccountID");

                    b.ToTable("Moderator", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationCategory")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("AccountID");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Organization", b =>
                {
                    b.Property<Guid>("OrganizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FoundingDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsModify")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationID");

                    b.HasIndex("OrganizationManagerID");

                    b.ToTable("Organization", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.OrganizationManager", b =>
                {
                    b.Property<Guid>("OrganizationManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TiktokUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationManagerID");

                    b.HasIndex("AccountID");

                    b.ToTable("OrganizationManager", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Post", b =>
                {
                    b.Property<Guid>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PostID");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.ProcessingPhase", b =>
                {
                    b.Property<Guid>("ProcessingPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessing")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProcessingPhaseId");

                    b.HasIndex("CampaignId")
                        .IsUnique();

                    b.ToTable("ProcessingPhase", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.StatementFile", b =>
                {
                    b.Property<Guid>("StatementFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StatementPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StatementFileId");

                    b.HasIndex("StatementPhaseId");

                    b.ToTable("StatementFile", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.StatementPhase", b =>
                {
                    b.Property<Guid>("StatementPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessing")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StatementPhaseId");

                    b.HasIndex("CampaignId")
                        .IsUnique();

                    b.ToTable("StatementPhase", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid?>("BankingAccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsIncognito")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:Identity", "100, 1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("PayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.HasIndex("AccountId");

                    b.HasIndex("BankingAccountID");

                    b.HasIndex("CampaignID");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.AccountToken", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("AccountTokens")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Achievement", b =>
                {
                    b.HasOne("BusinessObject.Models.Organization", "Organization")
                        .WithMany("Achievements")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BusinessObject.Models.Activity", b =>
                {
                    b.HasOne("BusinessObject.Models.ProcessingPhase", "ProcessingPhase")
                        .WithMany("Activities")
                        .HasForeignKey("ProcessingPhaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProcessingPhase");
                });

            modelBuilder.Entity("BusinessObject.Models.ActivityImage", b =>
                {
                    b.HasOne("BusinessObject.Models.Activity", "Activity")
                        .WithMany("ActivityImages")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("BusinessObject.Models.Admin", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.BankingAccount", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("BankingAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Member", null)
                        .WithMany("BankingAccounts")
                        .HasForeignKey("MemberID");

                    b.HasOne("BusinessObject.Models.OrganizationManager", null)
                        .WithMany("BankingAccounts")
                        .HasForeignKey("OrganizationManagerID");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Campaign", b =>
                {
                    b.HasOne("BusinessObject.Models.BankingAccount", "BankingAccount")
                        .WithMany("Campaigns")
                        .HasForeignKey("BankingAccountID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.CampaignType", "CampaignType")
                        .WithMany("Campaigns")
                        .HasForeignKey("CampaignTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Organization", "Organization")
                        .WithMany("Campaigns")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BankingAccount");

                    b.Navigation("CampaignType");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BusinessObject.Models.CreateActivityRequest", b =>
                {
                    b.HasOne("BusinessObject.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Moderator", "Moderator")
                        .WithMany("CreateActivityRequests")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Models.Member", "Member")
                        .WithMany("CreateActivityRequests")
                        .HasForeignKey("CreateByMember")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Models.OrganizationManager", "OrganizationManager")
                        .WithMany("CreateActivityRequests")
                        .HasForeignKey("CreateByOM")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Activity");

                    b.Navigation("Member");

                    b.Navigation("Moderator");

                    b.Navigation("OrganizationManager");
                });

            modelBuilder.Entity("BusinessObject.Models.CreateCampaignRequest", b =>
                {
                    b.HasOne("BusinessObject.Models.Moderator", "Moderator")
                        .WithMany("CreateCampaignRequests")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Models.Campaign", "Campaign")
                        .WithOne("CreateCampaignRequest")
                        .HasForeignKey("BusinessObject.Models.CreateCampaignRequest", "CampaignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Member", "Member")
                        .WithMany("CreateCampaignRequests")
                        .HasForeignKey("CreateByMember")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Models.OrganizationManager", "OrganizationManager")
                        .WithMany("CreateCampaignRequests")
                        .HasForeignKey("CreateByOM")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Campaign");

                    b.Navigation("Member");

                    b.Navigation("Moderator");

                    b.Navigation("OrganizationManager");
                });

            modelBuilder.Entity("BusinessObject.Models.CreateOrganizationManagerRequest", b =>
                {
                    b.HasOne("BusinessObject.Models.Moderator", "Moderator")
                        .WithMany("CreateOrganizationManagerRequests")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Models.OrganizationManager", "OrganizationManager")
                        .WithMany()
                        .HasForeignKey("OrganizationManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("OrganizationManager");
                });

            modelBuilder.Entity("BusinessObject.Models.CreateOrganizationRequest", b =>
                {
                    b.HasOne("BusinessObject.Models.Moderator", "Moderator")
                        .WithMany("CreateOrganizationRequests")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Models.OrganizationManager", "OrganizationManager")
                        .WithMany("CreateOrganizationRequests")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Organization", "Organization")
                        .WithOne("CreateOrganizationRequest")
                        .HasForeignKey("BusinessObject.Models.CreateOrganizationRequest", "OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationManager");
                });

            modelBuilder.Entity("BusinessObject.Models.CreatePostRequest", b =>
                {
                    b.HasOne("BusinessObject.Models.Moderator", "Moderator")
                        .WithMany("CreatePostRequests")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Models.Member", "Member")
                        .WithMany("CreatePostRequests")
                        .HasForeignKey("CreateByMember")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Models.OrganizationManager", "OrganizationManager")
                        .WithMany("CreatePostRequests")
                        .HasForeignKey("CreateByOM")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Models.Post", "Post")
                        .WithOne("CreatePostRequest")
                        .HasForeignKey("BusinessObject.Models.CreatePostRequest", "PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Moderator");

                    b.Navigation("OrganizationManager");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BusinessObject.Models.CreateVolunteerRequest", b =>
                {
                    b.HasOne("BusinessObject.Models.Moderator", "Moderator")
                        .WithMany("CreateVolunteerRequests")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Models.Member", "Member")
                        .WithMany("CreateMemberVerifiedRequests")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("BusinessObject.Models.DonatePhase", b =>
                {
                    b.HasOne("BusinessObject.Models.Campaign", "Campaign")
                        .WithOne("DonatePhase")
                        .HasForeignKey("BusinessObject.Models.DonatePhase", "CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("BusinessObject.Models.IPAddress", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("IPAddresses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Member", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Moderator", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Organization", b =>
                {
                    b.HasOne("BusinessObject.Models.OrganizationManager", "OrganizationManager")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationManagerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrganizationManager");
                });

            modelBuilder.Entity("BusinessObject.Models.OrganizationManager", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.ProcessingPhase", b =>
                {
                    b.HasOne("BusinessObject.Models.Campaign", "Campaign")
                        .WithOne("ProcessingPhase")
                        .HasForeignKey("BusinessObject.Models.ProcessingPhase", "CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("BusinessObject.Models.StatementFile", b =>
                {
                    b.HasOne("BusinessObject.Models.StatementPhase", "StatementPhase")
                        .WithMany("StatementFiles")
                        .HasForeignKey("StatementPhaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StatementPhase");
                });

            modelBuilder.Entity("BusinessObject.Models.StatementPhase", b =>
                {
                    b.HasOne("BusinessObject.Models.Campaign", "Campaign")
                        .WithOne("StatementPhase")
                        .HasForeignKey("BusinessObject.Models.StatementPhase", "CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("BusinessObject.Models.Transaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.BankingAccount", "BankingAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("BankingAccountID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Models.Campaign", "Campaign")
                        .WithMany("Transactions")
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("BankingAccount");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Navigation("AccountTokens");

                    b.Navigation("BankingAccounts");

                    b.Navigation("IPAddresses");

                    b.Navigation("Notifications");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObject.Models.Activity", b =>
                {
                    b.Navigation("ActivityImages");
                });

            modelBuilder.Entity("BusinessObject.Models.BankingAccount", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObject.Models.Campaign", b =>
                {
                    b.Navigation("CreateCampaignRequest");

                    b.Navigation("DonatePhase");

                    b.Navigation("ProcessingPhase");

                    b.Navigation("StatementPhase");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObject.Models.CampaignType", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("BusinessObject.Models.Member", b =>
                {
                    b.Navigation("BankingAccounts");

                    b.Navigation("CreateActivityRequests");

                    b.Navigation("CreateCampaignRequests");

                    b.Navigation("CreateMemberVerifiedRequests");

                    b.Navigation("CreatePostRequests");
                });

            modelBuilder.Entity("BusinessObject.Models.Moderator", b =>
                {
                    b.Navigation("CreateActivityRequests");

                    b.Navigation("CreateCampaignRequests");

                    b.Navigation("CreateOrganizationManagerRequests");

                    b.Navigation("CreateOrganizationRequests");

                    b.Navigation("CreatePostRequests");

                    b.Navigation("CreateVolunteerRequests");
                });

            modelBuilder.Entity("BusinessObject.Models.Organization", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Campaigns");

                    b.Navigation("CreateOrganizationRequest");
                });

            modelBuilder.Entity("BusinessObject.Models.OrganizationManager", b =>
                {
                    b.Navigation("BankingAccounts");

                    b.Navigation("CreateActivityRequests");

                    b.Navigation("CreateCampaignRequests");

                    b.Navigation("CreateOrganizationRequests");

                    b.Navigation("CreatePostRequests");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("BusinessObject.Models.Post", b =>
                {
                    b.Navigation("CreatePostRequest");
                });

            modelBuilder.Entity("BusinessObject.Models.ProcessingPhase", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("BusinessObject.Models.StatementPhase", b =>
                {
                    b.Navigation("StatementFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
